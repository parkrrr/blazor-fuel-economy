@using FuelEconomy.Model
@using FuelEconomy.Services
@using System.Globalization
@page "/vehicle/{VehicleId:guid}"

@if (_vehicle == null)
{
    return;
}
else
{
    <RadzenRow>
        <h3>@_vehicle.Name</h3>
    </RadzenRow>
    <RadzenRow>
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenCard Style="position: relative;">
                <RadzenText TextStyle="TextStyle.H6">Best Economy</RadzenText>
                <RadzenText TextStyle="TextStyle.H2" Style="position: absolute; right: 1.5rem; top: 1rem;">@(_vehicleStatisticsModel?.AverageEconomy.ToString("0.0"))</RadzenText>
                 <RadzenChart Style="width: 100%; height: 120px; margin-bottom: -30px">
                    <RadzenColumnSeries Data=@Economy ValueProperty="AverageEconomy" CategoryProperty="Month" Title="Economy"  />
                    <RadzenValueAxis Visible="false" />
                    <RadzenCategoryAxis Visible="false" />
                    <RadzenColumnOptions Margin="10" />
                    <RadzenLegend Visible="false" />
                    <RadzenChartTooltipOptions Visible="false" />
                </RadzenChart> 
            </RadzenCard>

        </RadzenStack>
    </RadzenRow>
    
}

@code {
    [Parameter]
    public Guid VehicleId { get; set; }

    [Inject]
    public VehicleService VehicleService { get; set; } = null!;

    [Inject]
    public EntriesService EntriesService { get; set; } = null!;

    [Inject]
    public VehicleStatisticsService VehicleStatisticsService { get; set; } = null!;

    private Vehicle? _vehicle { get; set; }
    private VehicleStatisticsModel? _vehicleStatisticsModel { get; set; }
    private List<MonthGroup>? Economy { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _vehicle = VehicleService.Get(VehicleId);
        _vehicleStatisticsModel = VehicleStatisticsService.Get(VehicleId);

        Economy = EntriesService.Get(VehicleId)
                                    .OrderByDescending(entry => entry.Timestamp)
                                    .Where(entry => entry.TimestampUtc > _vehicleStatisticsModel.LatestDate.AddYears(-1))
                                    .GroupBy(entry => entry.Timestamp.ToString("MMM", CultureInfo.InvariantCulture))
                                    .Select(group => new MonthGroup(group.Key, group.Average(group => group.GetEconomy())))
                                    .ToList();
    }

    private record MonthGroup(string Month, decimal? AverageEconomy);
}
